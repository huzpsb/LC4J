package org.eu.huzpsb.unichat.agent.impl.news;

import nano.http.d2.utils.Request;
import org.eu.huzpsb.unichat.agent.Transformer;
import org.eu.huzpsb.unichat.conversation.Conversation;
import org.eu.huzpsb.unichat.conversation.Entry;
import org.eu.huzpsb.unichat.conversation.EntryOwner;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DailyNewsTransformer implements Transformer {
    private static final String base = "https://text.npr.org/";
    private static final Pattern ptn = Pattern.compile("<a\\s+class=\"topic-title\"\\s+href=\"[^\"]+\">(.*?)</a>");
    private static String inject = null;
    private static long lastUpdate = 0;

    private static String[] extractTitles(String html) {
        Matcher matcher = ptn.matcher(html);
        List<String> titles = new ArrayList<>();
        while (matcher.find()) {
            titles.add(matcher.group(1));
        }
        return titles.toArray(new String[0]);
    }

    private static synchronized String getTitles() throws Exception {
        if (System.currentTimeMillis() - lastUpdate > 24L * 60 * 60 * 1000) {
            inject = null;
            lastUpdate = System.currentTimeMillis();
        }
        if (inject == null) {
            String[] titles = extractTitles(Request.get(base, null));
            StringBuilder sb = new StringBuilder("[UniChat]\nThe following conversation is generated by UniChat. Do not reply to this message.\nHere are the latest REAL headlines from BBC and NPR:\n");
            for (int i = 0; i < titles.length; i++) {
                sb.append(i + 1).append(". ").append(titles[i]).append("\n");
            }
            inject = sb.toString();
        }
        return inject;
    }

    @Override
    public Conversation beforeSend(Conversation conversation) {
        Conversation result = conversation.clone();
        try {
            result.entries.add(new Entry(EntryOwner.SYSTEM, getTitles()));
        } catch (Exception e) {
            result.entries.add(new Entry(EntryOwner.SYSTEM, "Failed to fetch news"));
        }
        return result;
    }

    @Override
    public Entry afterReceive(Entry entry) {
        return entry;
    }
}
